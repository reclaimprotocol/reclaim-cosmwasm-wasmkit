{
  "SampleProjectContract": {
    "schemaData": [
      {
        "kind": "interface",
        "name": "Constants",
        "properties": [
          {
            "name": "count",
            "type": "number"
          },
          {
            "name": "owner",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "CountResponse",
        "properties": [
          {
            "name": "count",
            "type": "number"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "ExecuteMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  increment: {\n    [k: string]: unknown;\n  };\n} | {\n  reset: {\n    count: number;\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InstantiateMsg",
        "properties": [
          {
            "name": "count",
            "type": "number"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "QueryMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  get_count: {\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "SampleProjectReadOnlyInterface",
        "properties": [
          {
            "name": "getCount",
            "type": "() => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "SampleProjectQueryContract",
        "properties": [
          {
            "name": "getCount",
            "type": "unknown"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "SampleProjectInterface",
        "properties": [
          {
            "name": "increment",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }) => Promise<any>"
          },
          {
            "name": "reset",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    count\n  }: {\n    count: number;\n  }) => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "SampleProjectContract",
        "properties": [
          {
            "name": "increment",
            "type": "unknown"
          },
          {
            "name": "reset",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  "NeutronVotingRegistryContract": {
    "schemaData": [
      {
        "kind": "typeAlias",
        "name": "ExecuteMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  add_voting_vault: {\n    new_voting_vault_contract: string;\n    [k: string]: unknown;\n  };\n} | {\n  remove_voting_vault: {\n    old_voting_vault_contract: string;\n    [k: string]: unknown;\n  };\n} | {\n  update_config: {\n    owner: string;\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InstantiateMsg",
        "properties": [
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "voting_vaults",
            "type": "string[]"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "QueryMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  dao: {};\n} | {\n  config: {};\n} | {\n  voting_vaults: {};\n} | {\n  voting_power_at_height: {\n    address: string;\n    height?: number | null;\n  };\n} | {\n  total_power_at_height: {\n    height?: number | null;\n  };\n} | {\n  info: {};\n}"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Addr",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Config",
        "properties": [
          {
            "name": "owner",
            "type": "Addr"
          },
          {
            "name": "voting_vaults",
            "type": "Addr[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InfoResponse",
        "properties": [
          {
            "name": "info",
            "type": "ContractVersion"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ContractVersion",
        "properties": [
          {
            "name": "contract",
            "type": "string"
          },
          {
            "name": "version",
            "type": "string"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Uint128",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "TotalPowerAtHeightResponse",
        "properties": [
          {
            "name": "height",
            "type": "number"
          },
          {
            "name": "power",
            "type": "Uint128"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "VotingPowerAtHeightResponse",
        "properties": [
          {
            "name": "height",
            "type": "number"
          },
          {
            "name": "power",
            "type": "Uint128"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Array_of_VotingVault",
        "properties": [
          {
            "name": "type",
            "type": "VotingVault[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "VotingVault",
        "properties": [
          {
            "name": "address",
            "type": "string"
          },
          {
            "name": "description",
            "type": "string"
          },
          {
            "name": "name",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "NeutronVotingRegistryReadOnlyInterface",
        "properties": [
          {
            "name": "dao",
            "type": "() => Promise<any>"
          },
          {
            "name": "config",
            "type": "() => Promise<any>"
          },
          {
            "name": "votingVaults",
            "type": "() => Promise<any>"
          },
          {
            "name": "votingPowerAtHeight",
            "type": "({\n    address,\n    height\n  }: {\n    address: string;\n    height: number | null;\n  }) => Promise<any>"
          },
          {
            "name": "totalPowerAtHeight",
            "type": "({\n    height\n  }: {\n    height: number | null;\n  }) => Promise<any>"
          },
          {
            "name": "info",
            "type": "() => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "NeutronVotingRegistryQueryContract",
        "properties": [
          {
            "name": "dao",
            "type": "unknown"
          },
          {
            "name": "config",
            "type": "unknown"
          },
          {
            "name": "votingVaults",
            "type": "unknown"
          },
          {
            "name": "votingPowerAtHeight",
            "type": "unknown"
          },
          {
            "name": "totalPowerAtHeight",
            "type": "unknown"
          },
          {
            "name": "info",
            "type": "unknown"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "NeutronVotingRegistryInterface",
        "properties": [
          {
            "name": "addVotingVault",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    newVotingVaultContract\n  }: {\n    newVotingVaultContract: string;\n  }) => Promise<any>"
          },
          {
            "name": "removeVotingVault",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    oldVotingVaultContract\n  }: {\n    oldVotingVaultContract: string;\n  }) => Promise<any>"
          },
          {
            "name": "updateConfig",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    owner\n  }: {\n    owner: string;\n  }) => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "NeutronVotingRegistryContract",
        "properties": [
          {
            "name": "addVotingVault",
            "type": "unknown"
          },
          {
            "name": "removeVotingVault",
            "type": "unknown"
          },
          {
            "name": "updateConfig",
            "type": "unknown"
          }
        ]
      }
    ]
  },
  "ReclaimCosmwasmContract": {
    "schemaData": [
      {
        "kind": "typeAlias",
        "name": "Uint128",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "Addr",
        "properties": [
          {
            "name": "type",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Config",
        "properties": [
          {
            "name": "current_epoch",
            "type": "Uint128"
          },
          {
            "name": "owner",
            "type": "Addr"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Epoch",
        "properties": [
          {
            "name": "id",
            "type": "Uint128"
          },
          {
            "name": "minimum_witness_for_claim_creation",
            "type": "Uint128"
          },
          {
            "name": "timestamp_end",
            "type": "number"
          },
          {
            "name": "timestamp_start",
            "type": "number"
          },
          {
            "name": "witness",
            "type": "Witness[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Witness",
        "properties": [
          {
            "name": "address",
            "type": "string"
          },
          {
            "name": "host",
            "type": "string"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "ExecuteMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  verify_proof: ProofMsg;\n} | {\n  add_epoch: {\n    minimum_witness: Uint128;\n    witness: Witness[];\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ProofMsg",
        "properties": [
          {
            "name": "proof",
            "type": "Proof"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "Proof",
        "properties": [
          {
            "name": "claimInfo",
            "type": "ClaimInfo"
          },
          {
            "name": "signedClaim",
            "type": "SignedClaim"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ClaimInfo",
        "properties": [
          {
            "name": "context",
            "type": "string"
          },
          {
            "name": "parameters",
            "type": "string"
          },
          {
            "name": "provider",
            "type": "string"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "SignedClaim",
        "properties": [
          {
            "name": "claim",
            "type": "CompleteClaimData"
          },
          {
            "name": "signatures",
            "type": "string[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "CompleteClaimData",
        "properties": [
          {
            "name": "epoch",
            "type": "number"
          },
          {
            "name": "identifier",
            "type": "string"
          },
          {
            "name": "owner",
            "type": "string"
          },
          {
            "name": "timestampS",
            "type": "number"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "GetAllEpochResponse",
        "properties": [
          {
            "name": "ids",
            "type": "number[]"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "GetEpochResponse",
        "properties": [
          {
            "name": "epoch",
            "type": "Epoch"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "InstantiateMsg",
        "properties": [
          {
            "name": "owner",
            "type": "string"
          }
        ]
      },
      {
        "kind": "typeAlias",
        "name": "QueryMsg",
        "properties": [
          {
            "name": "type",
            "type": "{\n  get_all_epoch: {\n    [k: string]: unknown;\n  };\n} | {\n  get_epoch: {\n    id: number;\n    [k: string]: unknown;\n  };\n}"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ReclaimCosmwasmReadOnlyInterface",
        "properties": [
          {
            "name": "getAllEpoch",
            "type": "() => Promise<any>"
          },
          {
            "name": "getEpoch",
            "type": "({\n    id\n  }: {\n    id: number;\n  }) => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "ReclaimCosmwasmQueryContract",
        "properties": [
          {
            "name": "getAllEpoch",
            "type": "unknown"
          },
          {
            "name": "getEpoch",
            "type": "unknown"
          }
        ]
      },
      {
        "kind": "interface",
        "name": "ReclaimCosmwasmInterface",
        "properties": [
          {
            "name": "verifyProof",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }) => Promise<any>"
          },
          {
            "name": "addEpoch",
            "type": "({\n    account,\n    customFees,\n    memo,\n    transferAmount\n  }: {\n    account: wasmKitTypes.UserAccount;\n    customFees?: wasmKitTypes.TxnStdFee;\n    memo?: string;\n    transferAmount?: readonly Coin[];\n  }, {\n    minimumWitness,\n    witness\n  }: {\n    minimumWitness: Uint128;\n    witness: Witness[];\n  }) => Promise<any>"
          }
        ]
      },
      {
        "kind": "class",
        "name": "ReclaimCosmwasmContract",
        "properties": [
          {
            "name": "verifyProof",
            "type": "unknown"
          },
          {
            "name": "addEpoch",
            "type": "unknown"
          }
        ]
      }
    ]
  }
}